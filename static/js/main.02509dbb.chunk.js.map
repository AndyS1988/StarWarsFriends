{"version":3,"sources":["Components/SearchBox.js","Components/FriendCard.js","Components/CardList.js","Containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","searchfield","searchChange","react_default","a","createElement","className","type","placeholder","onChange","FriendCard","props","name","height","mass","hair_color","skin_color","eye_color","birth_year","gender","CardList","friends","map","friend","i","src_Components_FriendCard","key","particleOpt","particles","number","value","density","enable","value_area","interactivity","events","onhover","mode","onresize","density_auto","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","state","_this2","fetch","then","resp","json","people","results","_this$state","filteredFriends","filter","toLowerCase","includes","length","src_Components_SearchBox","Components_CardList","particles_default","params","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_Containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02509dbb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='searchBar'>\r\n\t\t\t<input \r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Friends By Name'\r\n\t\t\t\tonChange={searchChange}\t\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\nimport './FriendCard.css';\r\n\r\nconst FriendCard = (props) => {\r\n\treturn (\r\n\t\t<div className=\"friend-card\">\r\n\t\t\t<h2>{props.name}</h2>\r\n\t\t\t<p>Height: {props.height}</p>\r\n\t\t\t<p>Mass: {props.mass}</p>\r\n\t\t\t<p>Hair Color: {props.hair_color}</p>\r\n\t\t\t<p>Skin Color: {props.skin_color}</p>\r\n\t\t\t<p>Eye Color: {props.eye_color}</p>\r\n\t\t\t<p>Birth Year: {props.birth_year}</p>\r\n\t\t\t<p>Gender: {props.gender}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default FriendCard;","import React from 'react';\r\nimport FriendCard from './FriendCard';\r\n\r\nconst CardList = ({ friends }) => {\r\n\treturn (\r\n\t\t<div>\t\r\n\t\t{\r\n\t\t\tfriends.map((friend, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<FriendCard\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tname={friends[i].name}\r\n\t\t\t\t\t\theight={friends[i].height}\r\n\t\t\t\t\t\tmass={friends[i].mass}\r\n\t\t\t\t\t\thair_color={friends[i].hair_color}\r\n\t\t\t\t\t\tskin_color={friends[i].skin_color}\r\n\t\t\t\t\t\teye_color={friends[i].eye_color}\r\n\t\t\t\t\t\tbirth_year={friends[i].birth_year}\r\n\t\t\t\t\t\tgender={friends[i].gender}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\t\t\t\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React, { Component } from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport SearchBox from '../Components/SearchBox';\nimport CardList from '../Components/CardList';\n\nconst particleOpt = {\n    particles: {\n      number: {\n        value: 230,\n        density: {\n          enable: true,\n          value_area: 800\n        }\n      }\n    },\n    interactivity: {\n          events: {\n              onhover: {\n                  enable: true,\n                  mode: \"repulse\"\n              },\n              onresize: {\n                enable: true,\n                density_auto: true,\n              }\n          }\n      }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      friends: [],\n      searchfield: ''\n    }\n  }\n    \n  componentDidMount() {\n    fetch(\"https://swapi.co/api/people/?page=1\")\n    .then(resp => resp.json())\n    .then(people => this.setState({ friends: people.results}))\n  }\n\nonSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value })\n  } \n\n  render() {\n    const { friends, searchfield } = this.state;\n    const filteredFriends = friends.filter(friend => {\n      return friend.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n    return !friends.length ?\n      <h1 className=\"aquaTxt\">Loading</h1> :\n     (\n      <div className=\"app\">\n        <header>\n          <h1 className=\"aquaTxt\">StarWarsFriends</h1>\n          <p className=\"aquaTxt\">Search for your favourite Star Wars Character</p>\n          <SearchBox searchChange={this.onSearchChange}/>\n        </header>\n        <main className=\"list\">\n          <CardList friends = { filteredFriends } />\n        </main>\n        <Particles params={particleOpt} />\n        <Particles params={particleOpt} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}